{"version":3,"sources":["AddressBookList/AddressBookList.js","Dialog/Dialog.js","App.js","serviceWorker.js","index.js"],"names":["AddressBookList","props","addressBook","map","item","Card","key","className","onClick","onDelete","bind","Body","FirstName","LastName","Birthday","Telephone","Dialog","Modal","show","onHide","title","Header","Title","message","Footer","Button","variant","confirmAction","rejectAction","App","useState","generate","setAddressBook","selectedKey","setSelectedKey","showDialog","setShowDialog","searchResults","setSearchResults","closeDialogHandler","Container","newAddressBook","index","findIndex","splice","type","placeholder","id","onChange","event","keyWord","target","value","filtered","filter","toLowerCase","includes","Form","onSubmit","preventDefault","newItem","firstName","lastName","birthday","telephone","Group","controlId","Label","Control","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95312420.chunk.js","sourcesContent":["import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nconst AddressBookList = (props) => {\n\tconst addressBook = [...props.addressBook];\n\tconst addressBookComponent = addressBook.map(item => \n\t\t<Card key={item.key}>\n      <span\n        className=\"text-right\"\n        onClick={props.onDelete.bind(null,item.key)}\n      >\n        {'\\u274e'}\n      </span>\n\t\t\t<Card.Body>\n\t\t\t\t<p>FirstName: {item.FirstName}</p>\n\t\t\t\t<p>LastName: {item.LastName}</p>\n\t\t\t\t<p>Birthday: {item.Birthday}</p>\n\t\t\t\t<p>Telephone: {item.Telephone}</p>\n\t\t\t</Card.Body>\n\t\t</Card>\n\t)\n\treturn addressBookComponent;\n}\n\nexport default AddressBookList;","import React from 'react';\nimport { Modal, Button } from 'react-bootstrap';\n\nconst Dialog = (props) => {\n  return (\n    <Modal show={props.show} onHide={props.onHide}>\n        {props.title ? <Modal.Header><Modal.Title>{props.title}</Modal.Title></Modal.Header> : null}\n\n        <Modal.Body>{props.message}</Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={props.confirmAction}>Yes</Button>\n          <Button variant=\"secondary\" onClick={props.rejectAction}>No</Button>\n        </Modal.Footer>\n    </Modal>\n  )\n}\n\nexport default Dialog;","import React, { useState } from 'react';\nimport './App.css';\nimport { Container, Form, Button } from 'react-bootstrap';\nimport AddressBookList from './AddressBookList/AddressBookList';\nimport Dialog from './Dialog/Dialog';\nimport { generate } from 'randomstring';\n\nfunction App() {\n  const [addressBook, setAddressBook] = useState([\n    {\n      key: generate(10),\n      FirstName: \"Cathy\" ,\n      LastName: \"Pierce\",\n      Birthday: \"9/14/1996\",\n      Telephone: \"200-910-8132\"\n    },\n    {\n      key: generate(10),\n      FirstName: \"Alfonso\",\n      LastName: \"Cooley\",\n      Birthday: \"8/10/1973\",\n      Telephone: \"200-657-9362\"\n    },\n    {\n      key: generate(10),\n      FirstName: \"Victor\",\n      LastName: \"Gordon\",\n      Birthday:  \"8/3/1970\",\n      Telephone: \"200-661-9407\"\n    },\n    {\n      key: generate(10),\n      FirstName: \"Colleen\",\n      LastName: \"Wright\",\n      Birthday: \"10/28/1967\",\n      Telephone: \"200-250-7949\"\n    },\n    {\n      key: generate(10),\n      FirstName: \"James\",\n      LastName: \"Johnston\",\n      Birthday: \"5/11/1972\",\n      Telephone: \"200-645-3176\"\n    },\n    {\n      key: generate(10),\n      FirstName: \"Anna\",\n      LastName: \"Reyes\",\n      Birthday: \"9/10/1975\",\n      Telephone: \"200-707-8670\"\n    }\n  ]);\n  const [selectedKey, setSelectedKey] = useState('');\n  const [showDialog, setShowDialog] = useState(false);\n  const [searchResults, setSearchResults] = useState(null);\n\n  const closeDialogHandler = () => {\n    setShowDialog(false);\n  }\n\n  const showDialogHandler = (key) => {\n    setSelectedKey(key);\n    setShowDialog(true);\n  }\n\n  const deleteItemHandler = () => {\n    const newAddressBook = [...addressBook];\n    const index = newAddressBook.findIndex(item => item.key === selectedKey);\n    newAddressBook.splice(index, 1);\n    setAddressBook(newAddressBook);\n    closeDialogHandler();\n  }\n\n  const addItemHandler = (event) => {\n    event.preventDefault();\n    const newItem = {\n      key: generate(10),\n      FirstName: event.target.firstName.value,\n      LastName: event.target.lastName.value,\n      Birthday: event.target.birthday.value,\n      Telephone: event.target.telephone.value\n    }\n    setAddressBook([...addressBook, newItem]);\n  }\n\n  const searchHandler = (event) => {\n    const keyWord = event.target.value;\n    if (keyWord) {\n      const filtered = [...addressBook].filter(item => {\n        return item.FirstName.toLowerCase().includes(keyWord) || item.LastName.toLowerCase().includes(keyWord)\n        || item.Birthday.toLowerCase().includes(keyWord) || item.Telephone.includes(keyWord);\n      })\n      setSearchResults(filtered);\n    } else {\n      setSearchResults(null);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Dialog\n          show={showDialog}\n          onHide={closeDialogHandler}\n          confirmAction={deleteItemHandler}\n          rejectAction={closeDialogHandler}\n          title=\"Warning\"\n          message=\"Are you sure you want to delete this?\"\n        />\n        <h1 className=\"text-left\">React Address Book</h1>\n        <div className=\"text-right\">\n          <input\n            type=\"text\" \n            placeholder=\"Search here\"\n            id=\"searchKeyWord\"\n            onChange={searchHandler} \n          />\n        </div>\n        {<AddressBookList addressBook={searchResults || addressBook} onDelete={showDialogHandler} />}\n        <h1 className=\"text-left\">Add New</h1>\n        <Form className=\"text-left\" onSubmit={addItemHandler}>\n          <Form.Group controlId=\"firstName\">\n            <Form.Label>First Name</Form.Label>\n            <Form.Control \n            type=\"text\" \n            placeholder=\"Enter first name\" />\n          </Form.Group>\n          <Form.Group controlId=\"lastName\">\n            <Form.Label>Last Name</Form.Label>\n            <Form.Control \n            type=\"text\" \n            placeholder=\"Enter last name\" />\n          </Form.Group>\n          <Form.Group controlId=\"birthday\">\n            <Form.Label>Birthday</Form.Label>\n            <Form.Control \n            type=\"text\" \n            placeholder=\"Enter birthday\" />\n          </Form.Group>\n          <Form.Group controlId=\"telephone\">\n            <Form.Label>Telephone</Form.Label>\n            <Form.Control \n            type=\"text\" \n            placeholder=\"Enter telephone\" />\n          </Form.Group>\n          <Button type=\"submit\" variant=\"primary\">\n            Submit\n          </Button>\n        </Form>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}